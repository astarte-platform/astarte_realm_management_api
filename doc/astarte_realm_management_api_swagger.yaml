swagger: "2.0"
info:
  description: "API for realm management."
  version: "0.1.0"
  title: "Realm Management API"
  contact:
    email: "info@ispirata.com"
host: "realmmanagement.api.astarte.cloud"
basePath: "/v1"
tags:
- name: "interface"
  description: "Interface management"
  externalDocs:
    description: "Find out more"
    url: "http://www.astarte.cloud/"
- name: "trigger"
  description: "Trigger management"
  externalDocs:
    description: "Find out more"
    url: "http://www.astarte.cloud/"
schemes:
- "http"
paths:
  /interfaces:
    get:
      tags:
      - "interface"
      summary: "Get interfaces list"
      description: "Get a list of all installed interfaces."
      operationId: "getInterfaces"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          examples:
            text/json: ["com.example.interfacefoo", "com.example.interfacebar"]
  /interfaces/{interface_name}:
    get:
      tags:
      - "interface"
      summary: "Get interface major versions"
      description: "An interface might have multiple major versions, list all of them. Previous minor versions for a given major version are not retrieved, only the most recent interface for each interface major is returned."
      operationId: "getInterfacesMajorVersions"
      produces:
      - "application/json"
      parameters:
      - name: "interface_name"
        in: "path"
        description: "Interface name"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          examples:
            text/json: [1, 2, 10]
    post:
      tags:
      - "interface"
      summary: "Add a new interface to the realm"
      description: "Install a new interface, or a newer major version for a given interface. Validation is performed, and an error is returned if interface cannot be installed, afterwards installation is performed."
      operationId: "addInterface"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Interface object that needs to be added to the realm"
        required: true
        schema:
          $ref: '#/definitions/Interface'
      responses:
        405:
          description: "Validation exception"
  /interfaces/{interface_name}/{major_version}:
    put:
      tags:
      - "interface"
      summary: "Updates an existing interface to a new minor release"
      description: "Replace an existing interface with a certain major version with a newer one (that must have same major version and a higher minor version). Server side validation is performed and afterwards interface upgrade is performed. This operation cannot be reverted."
      operationId: "updateInterface"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "interface_name"
        in: "path"
        description: "Interface name"
        required: true
        type: "string"
      - name: "major_version"
        in: "path"
        description: "Interface major version"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Interface object that needs to be added to the realm"
        required: true
        schema:
          $ref: '#/definitions/Interface'
      responses:
        405:
          description: "Validation exception"
    get:
      tags:
      - "interface"
      summary: "Get an interface"
      description: "Previously uploaded interface source file is retrieved."
      operationId: "getInterface"
      produces:
      - "application/json"
      parameters:
      - name: "interface_name"
        in: "path"
        description: "Interface name"
        required: true
        type: "string"
      - name: "major_version"
        in: "path"
        description: "Interface major version"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
  /triggers:
    get:
      tags:
      - "trigger"
      summary: "Get triggers list"
      description: "Get a list of all installed triggers. The trigger name for each installed trigger is reported."
      operationId: "getTriggersList"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          examples:
            text/json: ["new_data_on_test_interface", "connected_device", "value_above_threshold_alarm"]
  /triggers/{trigger_name}:
    get:
      tags:
      - "trigger"
      summary: "Get trigger configuration"
      description: "Retrieve installed trigger configuration. A trigger JSON representation is returned."
      operationId: "getTrigger"
      produces:
      - "application/json"
      parameters:
      - name: "trigger_name"
        in: "path"
        description: "Trigger name"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger not found"
    put:
      tags:
      - "trigger"
      summary: "Upate trigger configuration"
      description: "Update an existing trigger. This action allows to replace trigger configuration. Previous configuration will be used for any previously queued event."
      operationId: "updateTrigger"
      parameters:
      - name: "trigger_name"
        in: "path"
        description: "Trigger name"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"
        405:
          description: "Invalid Trigger Configuration"
    post:
      tags:
      - "trigger"
      summary: "Install trigger configuration"
      description: "Install a new trigger with given trigger_name. Trigger validation is performed before installation, if trigger configuration is not valid or a trigger with the same name already exists an error is reported. New trigger events might not be immediately processed."
      operationId: "installTrigger"
      parameters:
      - name: "trigger_name"
        in: "path"
        description: "Trigger name"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"
        405:
          description: "Invalid Trigger Configuration"
    delete:
      tags:
      - "trigger"
      summary: "Delete trigger"
      description: "Delete an existing trigger with a given trigger_name. Already queued triggers might be delivered for a short time after trigger deletion."
      operationId: "deleteTrigger"
      parameters:
      - name: "trigger_name"
        in: "path"
        description: "Trigger name"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"
definitions:
  Interface:
    type: "object"
