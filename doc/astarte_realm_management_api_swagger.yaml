swagger: "2.0"
info:
  description: "API for realm management."
  version: "0.1.0"
  title: "Realm Management API"
  contact:
    email: "info@ispirata.com"
host: "realmmanagement.api.astarte.cloud"
basePath: "/v1"
tags:
- name: "config"
  description: "Configuration management"
  externalDocs:
    description: "Find out more"
    url: "http://www.astarte.cloud/"
- name: "interface"
  description: "Interface management"
  externalDocs:
    description: "Find out more"
    url: "http://www.astarte.cloud/"
- name: "trigger"
  description: "Trigger management"
  externalDocs:
    description: "Find out more"
    url: "http://www.astarte.cloud/"
schemes:
- "http"
paths:
  /{realm_name}/config/auth:
    get:
      tags:
      - "config"
      summary: "Get auth configuration"
      description: "Get a JSON that describes the auth configuration of the realm"
      operationId: "getAuthConfiguration"
      produces:
      - "application/json"
      parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the configuration belongs to"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AuthConfigBody"

    put:
      tags:
      - "config"
      summary: "Install a new auth configuration for the realm"
      description: "Install a auth configuration for the realm. The body must contain the full configuration. Validation is performed, and an error is returned if the configuration cannot be installed."
      operationId: "putAuthConfiguration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the configuration belongs to"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "AuthConfig object with the new configuration"
        required: true
        schema:
          $ref: '#/definitions/AuthConfigBody'
      responses:
        204:
          description: "Success"
        422:
          description: "Bad request"

  /{realm_name}/interfaces:
    get:
      tags:
      - "interface"
      summary: "Get interfaces list"
      description: "Get a list of all installed interfaces."
      operationId: "getInterfaces"
      produces:
      - "application/json"
      parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the interface belongs to"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          examples:
            text/json: ["com.example.interfacefoo", "com.example.interfacebar"]

    post:
      tags:
      - "interface"
      summary: "Add a new interface to the realm"
      description: "Install a new interface, or a newer major version for a given interface. Validation is performed, and an error is returned if interface cannot be installed, afterwards installation is performed."
      operationId: "addInterface"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the interface belongs to"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Interface object that needs to be added to the realm"
        required: true
        schema:
          $ref: '#/definitions/Interface'
      responses:
        405:
          description: "Validation exception"


  /{realm_name}/interfaces/{interface_name}:
    parameters:
    - name: "realm_name"
      in: "path"
      description: "The realm which the interface belongs to"
      required: true
      type: "string"
    - name: "interface_name"
      in: "path"
      description: "Interface name"
      required: true
      type: "string"

    get:
      tags:
      - "interface"
      summary: "Get interface major versions"
      description: "An interface might have multiple major versions, list all of them. Previous minor versions for a given major version are not retrieved, only the most recent interface for each interface major is returned."
      operationId: "getInterfacesMajorVersions"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          examples:
            text/json: [1, 2, 10]

  /{realm_name}/interfaces/{interface_name}/{major_version}:
    parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the interface belongs to"
        required: true
        type: "string"
      - name: "interface_name"
        in: "path"
        description: "Interface name"
        required: true
        type: "string"
      - name: "major_version"
        in: "path"
        description: "Interface major version"
        required: true
        type: "integer"

    put:
      tags:
      - "interface"
      summary: "Updates an existing interface to a new minor release"
      description: "Replace an existing interface with a certain major version with a newer one (that must have same major version and a higher minor version). Server side validation is performed and afterwards interface upgrade is performed. This operation cannot be reverted."
      operationId: "updateInterface"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Interface object that needs to be added to the realm"
        required: true
        schema:
          $ref: '#/definitions/Interface'
      responses:
        405:
          description: "Validation exception"
    get:
      tags:
      - "interface"
      summary: "Get an interface"
      description: "Previously uploaded interface source file is retrieved."
      operationId: "getInterface"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"

    delete:
      tags:
      - "interface"
      summary: "Delete a draft interface"
      description: "Delete an interface draft (a draft is an interface with major version 0). An interface with a major version different than 0 should be manually deleted."
      operationId: "deleteInterface"
      responses:
        204:
          description: "No Content"
        403:
          description: "Forbidden"

  /{realm_name}/triggers:
    parameters:
    - name: "realm_name"
      in: "path"
      description: "The realm which the trigger belongs to"
      required: true
      type: "string"

    get:
      tags:
      - "trigger"
      summary: "Get triggers list"
      description: "Get a list of all installed triggers. The trigger name for each installed trigger is reported."
      operationId: "getTriggersList"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          examples:
            text/json: ["new_data_on_test_interface", "connected_device", "value_above_threshold_alarm"]

    post:
      tags:
      - "trigger"
      summary: "Install trigger configuration"
      description: "Install a new trigger using provided configuration. Trigger validation is performed before installation, if trigger configuration is not valid or a trigger with the same name already exists an error is reported. New trigger events might not be immediately processed."
      operationId: "installTrigger"
      parameters:
      - name: "body"
        in: "body"
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"
        405:
          description: "Invalid Trigger Configuration"


  /{realm_name}/triggers/{trigger_name}:
    parameters:
      - name: "realm_name"
        in: "path"
        description: "The realm which the trigger belongs to"
        required: true
        type: "string"
      - name: "trigger_name"
        in: "path"
        description: "Trigger name"
        required: true
        type: "string"

    get:
      tags:
      - "trigger"
      summary: "Get trigger configuration"
      description: "Retrieve installed trigger configuration. A trigger JSON representation is returned."
      operationId: "getTrigger"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger not found"

    put:
      tags:
      - "trigger"
      summary: "Upate trigger configuration"
      description: "Update an existing trigger. This action allows to replace trigger configuration. Previous configuration will be used for any previously queued event."
      operationId: "updateTrigger"
      parameters:
      - name: "body"
        in: "body"
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"
        405:
          description: "Invalid Trigger Configuration"

    delete:
      tags:
      - "trigger"
      summary: "Delete trigger"
      description: "Delete an existing trigger with a given trigger_name. Already queued triggers might be delivered for a short time after trigger deletion."
      operationId: "deleteTrigger"
      responses:
        200:
          description: "Success"
        404:
          description: "Trigger Not Found"


definitions:
  Interface:
    type: "object"
  AuthConfigBody:
    type: "object"
    required:
      - "data"
    properties:
      data:
        type: "object"
        properties:
          jwt_public_key_pem:
            type: "string"
            example: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsj7/Ci5Nx+ApLNW7+DyE\neTzQ68KEJT/gPW73Kpa2uyvxDwY669z/rP4hMj16wv4Ku3bI6C1ZIqT5SVuF8pDo\n1Y1SF0GRIeslupm9KV1aFqIu1/srLz18LQHucQYUSa99PStFUJY2V83wneaeAArY\n4VKDuQYtRZOd2VeD5Cbn602ksLLWCQc9HfL3VUHXTw6DuthnMMJARcVem8RAMScm\nhtGi6YRPFzvHtkb1WQCNGjw5gAmHX5/37ouwbBdnXOa9deiFv+1UIdcCVwMTyP/4\nf9jgaxW4oQV85enS/OJrrC9jU11agRc4bDv1h4s2t+ETWb4llTVk3HMIHbC3EvKJ\nVwIDAQAB\n-----END PUBLIC KEY-----\n"
