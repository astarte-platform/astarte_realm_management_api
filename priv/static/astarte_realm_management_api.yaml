openapi: 3.0.0
servers:
  - url: '{base_url}/v1'
    variables:
      base_url:
        default: 'http://localhost:4000'
        description: >-
          The base URL you're serving Astarte from. This should point to the
          base path from which Realm Management API is served. In case you are
          running a local installation, this is likely `http://localhost:4000`.
          If you are on a multi-domain instance, it is likely
          `https://realm.api.<your host>/`. In case you have a single domain
          instance, it is most likely `https://<your host>/realm`.
info:
  description: >-
    Astarte's Realm Management API is the main mechanism to configure a Realm.
    It allows installing and managing Interfaces, Triggers and any configuration
    of the Realm itself.
  version: 0.1.0
  title: Astarte Realm Management API
  contact:
    email: info@ispirata.com
tags:
  - name: config
    description: >-
      Realm Configuration Management. These APIs configure the global behavior
      of the Realm and how it can be accessed.
  - name: interface
    description: >-
      Interface management. These APIs are used for installing, deleting (if
      possible) and updating Interfaces in a Realm.
    externalDocs:
      description: User documentation
      url: 'https://docs.astarte-platform.org/snapshot/030-manage_interfaces.html'
  - name: trigger
    description: Trigger management
    externalDocs:
      description: User documentation
      url: 'https://docs.astarte-platform.org/snapshot/060-triggers.html'
paths:
  '/{realm_name}/config/auth':
    get:
      tags:
        - config
      summary: Get auth configuration
      description: Get a JSON that describes the auth configuration of the realm
      operationId: getAuthConfig
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Target realm
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GetAuthConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    put:
      tags:
        - config
      summary: Install a new auth configuration for the realm
      description: >-
        Installs a auth configuration for the realm. The body must contain the
        full auth configuration. Validation is performed, and an error is
        returned if the configuration cannot be installed or validated.
      operationId: putAuthConfig
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Target realm
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ConfigValidationError'
      requestBody:
        $ref: '#/components/requestBodies/PutAuthConfig'
  '/{realm_name}/interfaces':
    get:
      tags:
        - interface
      summary: Get interface list
      description: Get a list of all installed interface names.
      operationId: getInterfaceList
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Target realm
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GetInterfaceList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - interface
      summary: Install a new interface to the realm
      description: >-
        Install a new interface, or a newer major version for a given interface.
        Validation is performed, and an error is returned if interface cannot be
        installed. The installation is performed asynchronously.
      operationId: installInterface
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Target realm
          required: true
          schema:
            type: string
      responses:
        '201':
          $ref: '#/components/responses/InstallInterface'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/InterfaceValidationError'
      requestBody:
        $ref: '#/components/requestBodies/InstallInterface'
  '/{realm_name}/interfaces/{interface_name}':
    parameters:
      - name: realm_name
        in: path
        description: Target realm
        required: true
        schema:
          type: string
      - name: interface_name
        in: path
        description: Interface name
        required: true
        schema:
          type: string
    get:
      tags:
        - interface
      summary: Get interface major versions
      description: 'An interface might have multiple major versions, list all of them.'
      operationId: getInterfaceMajorVersions
      security:
        - JWT: []
      responses:
        '200':
          $ref: '#/components/responses/GetInterfaceMajorVersions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/InterfaceNotFound'
  '/{realm_name}/interfaces/{interface_name}/{major_version}':
    parameters:
      - name: realm_name
        in: path
        description: Target realm
        required: true
        schema:
          type: string
      - name: interface_name
        in: path
        description: Interface name
        required: true
        schema:
          type: string
      - name: major_version
        in: path
        description: Interface major version
        required: true
        schema:
          type: integer
    put:
      tags:
        - interface
      summary: Updates an existing interface to a new minor release
      description: >-
        Replace an existing interface with a certain major version with a new
        one (that must have same major version and a higher minor version).
        Server side validation is performed and the interface upgrade is
        performed aynchronously. For more information about what is allowed when
        updating an interface, see [the
        doc](https://docs.astarte-platform.org/snapshot/030-interface.html#versioning).
        This operation cannot be reverted.
      operationId: updateInterface
      security:
        - JWT: []
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/InterfaceNotFound'
        '409':
          $ref: '#/components/responses/UpdateConflict'
        '422':
          $ref: '#/components/responses/InterfaceValidationError'
      requestBody:
        $ref: '#/components/requestBodies/UpdateInterface'
    get:
      tags:
        - interface
      summary: Get an interface
      description: >-
        Show a previously installed interface. Previous minor versions for a
        given major version are not retrieved, only the most recent interface
        for each interface major is returned.
      operationId: getInterface
      security:
        - JWT: []
      responses:
        '200':
          $ref: '#/components/responses/GetInterface'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/InterfaceNotFound'
    delete:
      tags:
        - interface
      summary: Delete a draft interface
      description: >-
        Delete an interface draft (a draft is an interface with major version
        0). An interface with a major version different than 0 should be
        manually deleted.
      operationId: deleteInterface
      security:
        - JWT: []
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/InterfaceNotFound'
  '/{realm_name}/triggers':
    parameters:
      - name: realm_name
        in: path
        description: The realm which the trigger belongs to
        required: true
        schema:
          type: string
    get:
      tags:
        - trigger
      summary: Get triggers list
      description: >-
        Get a list of all installed triggers. The trigger name for each
        installed trigger is reported.
      operationId: getTriggersList
      security:
        - JWT: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                example:
                  data:
                    - new_data_on_test_interface
                    - connected_device
                    - value_above_threshold_alarm
    post:
      tags:
        - trigger
      summary: Install trigger configuration
      description: >-
        Install a new trigger using provided configuration. Trigger validation
        is performed before installation, if trigger configuration is not valid
        or a trigger with the same name already exists an error is reported. New
        trigger events might not be immediately processed.
      operationId: installTrigger
      security:
        - JWT: []
      responses:
        '200':
          description: Success
        '404':
          description: Trigger Not Found
        '405':
          description: Invalid Trigger Configuration
      requestBody:
        $ref: '#/components/requestBodies/InstallTriggerBody'
  '/{realm_name}/triggers/{trigger_name}':
    parameters:
      - name: realm_name
        in: path
        description: The realm which the trigger belongs to
        required: true
        schema:
          type: string
      - name: trigger_name
        in: path
        description: Trigger name
        required: true
        schema:
          type: string
    get:
      tags:
        - trigger
      summary: Get trigger configuration
      description: >-
        Retrieve installed trigger configuration. A trigger JSON representation
        is returned.
      operationId: getTrigger
      security:
        - JWT: []
      responses:
        '200':
          description: Success
        '404':
          description: Trigger not found
    delete:
      tags:
        - trigger
      summary: Delete trigger
      description: >-
        Deletes an existing trigger with a given `trigger_name`. Please note
        that triggers which have been already queued might still be delivered
        for a short time even after trigger deletion.
      operationId: deleteTrigger
      security:
        - JWT: []
      responses:
        '200':
          description: Success
        '404':
          description: Trigger Not Found
components:
  responses:
    ConfigValidationError:
      description: The provided configuration is not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            errors:
              jwt_public_key_pem:
                - is not a valid PEM public key
    Forbidden:
      description: >-
        Authorization failed for the resource. This could also result from
        unexisting resources.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
          example:
            errors:
              detail: Forbidden
    GetAuthConfig:
      description: Success
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/AuthConfig'
    GetInterface:
      description: Success
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/Interface'
    GetInterfaceList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  type: string
            example:
              data:
                - com.example.InterfaceFoo
                - com.example.InterfaceBar
    GetInterfaceMajorVersions:
      description: Success
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  type: integer
            example:
              data:
                - 1
                - 2
                - 10
    InstallInterface:
      description: Interface installation succesfully started
      headers:
        Location:
          description: URL of the installed interface
          schema:
            type: string
    InterfaceNotFound:
      description: Requested interface was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
          example:
            errors:
              detail: Interface not found
    InterfaceValidationError:
      description: The provided interface is not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            errors:
              mappings:
                type:
                  - is invalid
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
          example:
            errors:
              detail: Unauthorized
    UpdateConflict:
      description: >-
        The updated interface is valid, but there's a conflict with the existing
        one
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
          example:
            errors:
              detail: Interface minor version was not increased
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
      description: >
        To access APIs a valid JWT token must be passed in all requests in the
        `Authorization` header. This token should be signed with the private key
        associated with the realm the request refers to.


        The following syntax must be used in the `Authorization` header :
          `Bearer xxxxxx.yyyyyyy.zzzzzz`
  requestBodies:
    InstallTriggerBody:
      content:
        application/json:
          schema:
            type: string
    InstallInterface:
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/Interface'
      description: A JSON object representing an Astarte Interface.
      required: true
    PutAuthConfig:
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/AuthConfig'
      description: AuthConfig object with the new configuration
      required: true
    UpdateInterface:
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/Interface'
          example:
            data:
              interface_name: org.astarteplatform.Values
              version_major: 0
              version_minor: 2
              type: datastream
              ownership: device
              mappings:
                - endpoint: /realValue
                  type: double
                  explicit_timestamp: true
                - endpoint: /anotherValue
                  type: string
      description: A JSON object representing the updated Astarte Interface.
      required: true
  schemas:
    Interface:
      type: object
      example:
        interface_name: org.astarteplatform.Values
        version_major: 0
        version_minor: 1
        type: datastream
        ownership: device
        mappings:
          - endpoint: /realValue
            type: double
            explicit_timestamp: true
    AuthConfig:
      type: object
      properties:
        jwt_public_key_pem:
          type: string
          example: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsj7/Ci5Nx+ApLNW7+DyE
            eTzQ68KEJT/gPW73Kpa2uyvxDwY669z/rP4hMj16wv4Ku3bI6C1ZIqT5SVuF8pDo
            1Y1SF0GRIeslupm9KV1aFqIu1/srLz18LQHucQYUSa99PStFUJY2V83wneaeAArY
            4VKDuQYtRZOd2VeD5Cbn602ksLLWCQc9HfL3VUHXTw6DuthnMMJARcVem8RAMScm
            htGi6YRPFzvHtkb1WQCNGjw5gAmHX5/37ouwbBdnXOa9deiFv+1UIdcCVwMTyP/4
            f9jgaxW4oQV85enS/OJrrC9jU11agRc4bDv1h4s2t+ETWb4llTVk3HMIHbC3EvKJ
            VwIDAQAB
            -----END PUBLIC KEY-----
    GenericError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
    ValidationError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: object
